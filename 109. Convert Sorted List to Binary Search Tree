/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
 //-------------Different Approach---------------------------////
 // class Solution {
    
//     public TreeNode sortedListToBST(ListNode head) {
//         if(head==null) return null;
//         if(head.next==null){
//             return new TreeNode(head.val);
//         }
        
//         ListNode Mid=head;
//         ListNode fast=head;
//         ListNode preMid=null;
        
//         while(fast!=null && fast.next!=null){
//             fast=fast.next.next;
//             preMid=Mid;
//             Mid=Mid.next;
//         }//for the last case: if this loop is skipped then preMid will remain unchanged
//          //that is preMid will remain preMid=null
        
//         if(preMid!=null){
//             preMid.next=null;
//         }
        
//         TreeNode node = new TreeNode(Mid.val);
        
//         node.left=sortedListToBST(head);
//         node.right=sortedListToBST(Mid.next);
        
//         return node;
//     }
    
    
// }

 //-------------Different Approach---------------------------////
 
 
class Solution {
    public TreeNode sortedListToBST(ListNode head) {
        if(head==null) return null;
        ListNode Mid=head;
        ListNode fast=head;
        ListNode preMid=null;
        
        while(fast!=null && fast.next!=null){
            fast=fast.next.next;
            preMid=Mid;
            Mid=Mid.next;
        }
        
        TreeNode node = new TreeNode(Mid.val); //root node
        
        if(preMid!=null){
            preMid.next=null;
            node.left=sortedListToBST(head);
            node.right=sortedListToBST(Mid.next);
        }
        return node;
    }
}
